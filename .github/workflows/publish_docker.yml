# TODO: create a tag/release with the version based on the version in Cargo.toml every time a
# merge is made to master? Prevent any merges to master without a code change? (That's probably
# tricky- what to do about documentation changes etc.? Perhaps build the container image, see if
# the checksum is the same as the existing one, and prevent pushes to master that change the
# container checksum without changing the Cargo.lock version?).

# TODO:
# - delete created images from the repository when a release is deleted/unpublished?

name: Publish image

on:
  push:
    branches:
      - '**'

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      -
        # At the time of writing, we need to manually specify the context, as we can't set a
        # subdirectory of the repo as a build context
        # https://github.com/docker/build-push-action/tree/636b4540ec057719fe868a4435761056c89d2fff#git-context
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          # Except for Dockerhub, which is the default, tags need to have the registry name in
          # them, e.g. ghcr.io for Github container registry, or gcr.io for Google container
          # registry.
          # Note that the generated tags will look like:
          #   ghcr.io/{owner}/{repo}:version
          images: ghcr.io/${{ github.repository }}
          # For a release v1.2.3, we'll produce the following image tags
          #   v1.2.3
          #   1.2.3
          #   1.2
          #   latest
          # Semver pre-release versions are also supported
          # See also:
          # https://github.com/crazy-max/ghaction-docker-meta/tree/0a412843f87333854fa03a809b74056b64c6f31a#handle-semver-tag
          tag-semver: |
            {{raw}}
            {{version}}
            {{major}}.{{minor}}
          label-custom: |
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.source=https://github.com/${{ github.repository }}/tree/${{ github.sha }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2.2.1
        with:
          push: true
          # The following two lines are required in concert with the checkout action above, because
          # the Dockerfile is in a subdirectory in the repo.
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
